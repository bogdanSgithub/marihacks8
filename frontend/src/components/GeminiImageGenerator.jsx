import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Input } from '@/components/ui/input';
import { Loader2, ImageIcon, Download } from 'lucide-react';

const GeminiImageGenerator = () => {
  const [prompt, setPrompt] = useState('');
  const [apiKey, setApiKey] = useState('');
  const [image, setImage] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!prompt || !apiKey) {
      setError('Please provide both a prompt and API key');
      return;
    }

    setLoading(true);
    setError('');

    try {
      // Note: This is where the backend call would happen.
      // For demonstration, we'll use a placeholder image
      // In a real implementation, this would connect to your backend
      
      setTimeout(() => {
        // This is just a simulation - in a real app this would be the actual image data
        setImage('/api/placeholder/640/480');
        setLoading(false);
      }, 2000);

      // Actual implementation would look something like:
      /*
      const response = await fetch('/api/generate-image', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt, apiKey }),
      });
      
      if (!response.ok) throw new Error('Failed to generate image');
      
      const data = await response.json();
      setImage(`data:image/png;base64,${data.imageData}`);
      */
    } catch (err) {
      setError('Error generating image: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const downloadImage = () => {
    // This would download the actual image in a real implementation
    if (!image) return;
    
    const link = document.createElement('a');
    link.href = image;
    link.download = 'gemini-generated-image.png';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>Gemini Image Generator</CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-4">
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="text-sm font-medium" htmlFor="apiKey">
              Gemini API Key
            </label>
            <Input
              id="apiKey"
              type="password"
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              placeholder="Enter your Gemini API key"
            />
          </div>
          
          <div>
            <label className="text-sm font-medium" htmlFor="prompt">
              Describe your image
            </label>
            <Textarea
              id="prompt"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="Describe the image you want to generate..."
              rows={3}
            />
          </div>
          
          <Button 
            type="submit" 
            disabled={loading}
            className="w-full"
          >
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <ImageIcon className="mr-2 h-4 w-4" />
                Generate Image
              </>
            )}
          </Button>
        </form>

        {error && (
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {image && (
          <div className="mt-4 space-y-2">
            <div className="relative">
              <img 
                src={image} 
                alt="Generated by Gemini" 
                className="w-full h-auto rounded-md border" 
              />
              
              <Button
                onClick={downloadImage}
                size="sm"
                className="absolute bottom-2 right-2"
              >
                <Download className="h-4 w-4 mr-1" />
                Download
              </Button>
            </div>
          </div>
        )}
      </CardContent>
      
      <CardFooter className="flex justify-center">
        <p className="text-xs text-gray-500">
          Powered by Google Gemini API
        </p>
      </CardFooter>
    </Card>
  );
};

export default GeminiImageGenerator;